{"version":3,"sources":["index.js","devices/SdcSoftDevice.js","meta/DeviceFieldForUI.js","meta/ExceptionField.js","meta/ByteField.js","meta/CommandField.js","meta/PointField.js","command/Command.js","utils/CRC16Util.js","utils/NumberUtil.js","entities/Element.js","map/map.js","utils/DeviceAdapterUtil.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA;ADIA,ADGA,AENA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,AFMA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA;AFOA,AGTA,ACHA,AHSA,ACHA,AGTA;ALgBA,AGTA,ACHA,AHSA,ACHA,AGTA;ALgBA,AGTA,ACHA,AHSA,ACHA,AGTA;ACFA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA;ACFA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA;ACFA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA;ACFA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA,AENA;ADIA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA,AENA;ADIA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA,AENA;ADIA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AGTA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AS3BA,ANkBA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AS3BA,ANkBA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AS3BA,ANkBA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,ACHA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA,AHSA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA,AHSA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA,AHSA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA,AHSA;AFOA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,ACHA,AGTA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AIZA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AIZA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AIZA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AIZA,AENA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,ACHA,AHSA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AMlBA,AIZA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ACHA,APqBA,AFMA,AU9BA;ALgBA,ANkBA,AS3BA,ANkBA,AFMA,AU9BA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AGTA,AQxBA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,ANkBA,AWjCA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;ALgBA,AKfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst SdcSoftDevice_1 = require(\"./devices/SdcSoftDevice\");\r\nexports.SdcSoftDevice = SdcSoftDevice_1.SdcSoftDevice;\r\nconst DeviceAdapterUtil_1 = require(\"./utils/DeviceAdapterUtil\");\r\nexports.Wechat_DeviceAdapter = DeviceAdapterUtil_1.Wechat_DeviceAdapter;\r\nexports.Web_DeviceAdapter = DeviceAdapterUtil_1.Web_DeviceAdapter;\r\nconst Commands = require(\"./command/Command\");\r\nexports.Commands = Commands;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst comms_1 = require(\"@sdcsoft/comms\");\r\nconst DeviceFieldForUI_1 = require(\"../meta/DeviceFieldForUI\");\r\nconst Element_1 = require(\"../entities/Element\");\r\nconst comms_2 = require(\"@sdcsoft/comms\");\r\nconst ByteField_1 = require(\"../meta/ByteField\");\r\nconst map_1 = require(\"../map/map\");\r\nvar Media;\r\n(function (Media) {\r\n    Media[Media[\"ReShui\"] = 0] = \"ReShui\";\r\n    Media[Media[\"ZhengQi\"] = 1] = \"ZhengQi\";\r\n    Media[Media[\"DaoReYou\"] = 2] = \"DaoReYou\";\r\n    Media[Media[\"ReFeng\"] = 3] = \"ReFeng\";\r\n    Media[Media[\"ZhenKong\"] = 4] = \"ZhenKong\";\r\n})(Media = exports.Media || (exports.Media = {}));\r\nvar Power;\r\n(function (Power) {\r\n    Power[Power[\"YouQi\"] = 0] = \"YouQi\";\r\n    Power[Power[\"Dian\"] = 1] = \"Dian\";\r\n    Power[Power[\"Mei\"] = 2] = \"Mei\";\r\n    Power[Power[\"ShengWuZhi\"] = 3] = \"ShengWuZhi\";\r\n    Power[Power[\"YuRe\"] = 30] = \"YuRe\";\r\n})(Power = exports.Power || (exports.Power = {}));\r\nclass SdcSoftDevice {\r\n    constructor() {\r\n        this.fieldMap = new comms_1.StringHashMap();\r\n        this.commandMap = new comms_1.StringHashMap();\r\n        this.modbusNo = 1;\r\n        this.BYTE_ARRAY_LENGTH = 0;\r\n        this.power = SdcSoftDevice.POWER_MEDIA_VALUE_NULL;\r\n        this.media = SdcSoftDevice.POWER_MEDIA_VALUE_NULL;\r\n        this.deviceNo = '';\r\n        this.warningMsg = '';\r\n        /**\r\n         * 设置设备类型信息\r\n         */\r\n        this.typeName = '';\r\n        this.fieldMap.addItem(comms_2.GroupKeys.KEY_BASE, new comms_1.StringHashMap());\r\n        this.fieldMap.addItem(comms_2.GroupKeys.KEY_EXCEPTION, new comms_1.StringHashMap());\r\n        this.fieldMap.addItem(comms_2.GroupKeys.KEY_MOCK, new comms_1.StringHashMap());\r\n        this.fieldMap.addItem(comms_2.GroupKeys.KEY_SETTING, new comms_1.StringHashMap());\r\n        this.fieldMap.addItem(comms_2.GroupKeys.KEY_DEVICE, new comms_1.StringHashMap());\r\n        this.fieldMap.addItem(comms_2.GroupKeys.KEY_START_STOP, new comms_1.StringHashMap());\r\n        this.fieldMap.addItem(comms_2.GroupKeys.KEY_OPEN_CLOSE, new comms_1.StringHashMap());\r\n        this.fieldMap.addItem(map_1.map.KEY_Count_Fields, new comms_1.StringHashMap());\r\n    }\r\n    initCommandsMapKeys(map) {\r\n        this.commandMap = map;\r\n    }\r\n    setPower(power) {\r\n        this.power = power;\r\n    }\r\n    setMedia(media) {\r\n        this.media = media;\r\n    }\r\n    setDeviceNo(deviceNo) {\r\n        this.deviceNo = deviceNo;\r\n    }\r\n    getFieldsMap(groupKey) {\r\n        return this.fieldMap.getItem(groupKey);\r\n    }\r\n    getBaseInfoFields() {\r\n        return this.getFieldsMap(comms_2.GroupKeys.KEY_BASE);\r\n    }\r\n    getDeviceFields() {\r\n        return this.getFieldsMap(comms_2.GroupKeys.KEY_DEVICE);\r\n    }\r\n    getExceptionFields() {\r\n        return this.getFieldsMap(comms_2.GroupKeys.KEY_EXCEPTION);\r\n    }\r\n    getMockFields() {\r\n        return this.getFieldsMap(comms_2.GroupKeys.KEY_MOCK);\r\n    }\r\n    getSettingFields() {\r\n        return this.getFieldsMap(comms_2.GroupKeys.KEY_SETTING);\r\n    }\r\n    getStartStopFields() {\r\n        return this.getFieldsMap(comms_2.GroupKeys.KEY_START_STOP);\r\n    }\r\n    getOpenCloseFields() {\r\n        return this.getFieldsMap(comms_2.GroupKeys.KEY_OPEN_CLOSE);\r\n    }\r\n    getCountFields() {\r\n        return this.getFieldsMap(map_1.map.KEY_Count_Fields);\r\n    }\r\n    getExceptionCount() {\r\n        return this.getExceptionFields().count;\r\n    }\r\n    getDeviceStatus() {\r\n        return this.getBaseInfoFields().getItem(SdcSoftDevice.KEY_POINT_SYSTEM_STATUS);\r\n    }\r\n    addCommand(cmdGroupKey, cmd) {\r\n        if (this.commandMap.containsKey(cmdGroupKey)) {\r\n            this.commandMap.getItem(cmdGroupKey).push(cmd);\r\n        }\r\n        else {\r\n            let value = [cmd];\r\n            this.commandMap.addItem(cmdGroupKey, value);\r\n        }\r\n    }\r\n    addUIField(field) {\r\n        if (null == field)\r\n            return;\r\n        let key = field.getKey();\r\n        if (this.fieldMap.containsKey(key)) {\r\n            this.fieldMap.getItem(key).addItem(field.getName(), field);\r\n        }\r\n    }\r\n    addField(field) {\r\n        if (field instanceof ByteField_1.ByteField) {\r\n            //需要剔除纯控制程序点位\r\n            let ui = field.getDeviceFieldForUI();\r\n            if (ui) {\r\n                this.addUIField(ui);\r\n            }\r\n            //处理保护执行命令的点位\r\n            let cmd = field.getCommand();\r\n            if (cmd) {\r\n                this.addCommand(field.getCommandGroupKey(), cmd);\r\n            }\r\n            return;\r\n        }\r\n        if (field instanceof DeviceFieldForUI_1.DeviceFieldForUI) {\r\n            this.addUIField(field);\r\n        }\r\n    }\r\n    removeField(groupKey, fieldName) {\r\n        this.fieldMap.getItem(groupKey).remove(fieldName);\r\n    }\r\n    /**\r\n     * 获取炉子元素信息\r\n     * @returns AElement\r\n     */\r\n    getStoveElement() {\r\n        let element = new Element_1.Element();\r\n        element.setPrefix(Element_1.Element.Prefix_Stove);\r\n        element.setTitle('锅炉');\r\n        element.SetValues(Element_1.Element.Index_A_Power, this.power, this.media, this.getPowerInfo(), SdcSoftDevice.Style_Horizontal);\r\n        return element;\r\n    }\r\n    validateFalse(bytesLength) {\r\n        return this.BYTE_ARRAY_LENGTH > bytesLength;\r\n    }\r\n    getCommands() {\r\n        this.commandMap.each((key, value) => {\r\n            for (let index in value) {\r\n                value[index].setModbusNo(this.modbusNo);\r\n            }\r\n        });\r\n        return this.commandMap;\r\n    }\r\n    /**\r\n     * 获取设备的子类型命令\r\n     */\r\n    getSubDeviceType() {\r\n        return SdcSoftDevice.NO_SUB_DEVICE_TYPE;\r\n    }\r\n    setTypeName(typeName) {\r\n        this.typeName = typeName;\r\n    }\r\n    /**\r\n     * 获取设备类型信息\r\n     */\r\n    getTypeName() {\r\n        return this.typeName;\r\n    }\r\n    handleCommandFields(commandsGroup) {\r\n        commandsGroup.each((key, values) => {\r\n            values.forEach((v) => {\r\n                this.addCommand(key, v);\r\n            });\r\n        });\r\n        commandsGroup.clear();\r\n    }\r\n}\r\nSdcSoftDevice.POWER_MEDIA_VALUE_NULL = -1;\r\nSdcSoftDevice.KEY_POINT_SYSTEM_STATUS = 'o_system_status';\r\nSdcSoftDevice.KEY_POINT_POWER = 'o_power';\r\nSdcSoftDevice.KEY_POINT_MEDIA = 'o_media';\r\nSdcSoftDevice.KEY_POINT_RUN_LIFE = 'ba_yunxingshijian';\r\nSdcSoftDevice.KEY_POINT_RUN_DAYS = 'ba_yunxingtianshu';\r\nSdcSoftDevice.KEY_POINT_RUN_HOURS = 'ba_yunxingxiaoshishu';\r\nSdcSoftDevice.KEY_POINT_JIA_RE_ZU = 'jia_re_zu_count';\r\nSdcSoftDevice.Style_Horizontal = 0;\r\nSdcSoftDevice.Style_Vertical = 1;\r\n/*\r\n设备类型由用户确认时执行的逻辑\r\n 子类型映射map\r\n\r\nprivate subTypes = new StringHashMap<string>()\r\n\r\n\r\ngetDeviceType(): string {\r\n    return ''\r\n}\r\n\r\nsetSubTypes(map:StringHashMap<string>):void{\r\n    this.subTypes = map\r\n}\r\n\r\n/\r\n * 根据子类型展示名称获取子类型名称\r\n * @param key 子类型展示名称\r\n \r\ngetSubDeviceType(key: string): string {\r\n    return this.subTypes.getItem(key)\r\n}\r\n\r\n * 获取子类型展示名称列表\r\n \r\ngetSubTypesNameArray() {\r\n    return this.subTypes.Keys\r\n}\r\n\r\n * 获取设备的警告信息\r\n \r\ngetWarningMsg(){\r\n    return this.warningMsg\r\n}\r\n\r\n * 设置设备的警告信息\r\n \r\nsetWarningMsg(msg:string){\r\n    this.warningMsg = msg\r\n}\r\n*/\r\n/**\r\n * 自动确认设备类型的逻辑\r\n */\r\n/**\r\n * 无子类型的标识\r\n */\r\nSdcSoftDevice.NO_SUB_DEVICE_TYPE = '-1';\r\nexports.SdcSoftDevice = SdcSoftDevice;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ExceptionField_1 = require(\"./ExceptionField\");\r\n//namespace DevicesLib.meta {\r\nclass DeviceFieldForUI {\r\n    constructor(valueMap) {\r\n        this.name = '';\r\n        this.value = 0;\r\n        this.key = '';\r\n        this.title = '';\r\n        this.valueString = null;\r\n        this.exceptionLevel = null;\r\n        this.valueMap = null;\r\n        this.unit = '';\r\n        if (valueMap) {\r\n            this.valueMap = valueMap;\r\n        }\r\n    }\r\n    getValueMap() {\r\n        return this.valueMap;\r\n    }\r\n    getUnit() {\r\n        return this.unit;\r\n    }\r\n    setUnit(unit) {\r\n        this.unit = unit;\r\n    }\r\n    setExcptionLevel(level) {\r\n        this.exceptionLevel = level;\r\n    }\r\n    // setNeedFormat(needFormat: boolean) {\r\n    //     this.needFormat = needFormat\r\n    // }\r\n    //private needFormat: boolean =false\r\n    getKey() {\r\n        return this.key;\r\n    }\r\n    setKey(key) {\r\n        this.key = key;\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n    getValue() {\r\n        if (this.value)\r\n            return this.value;\r\n        return 0;\r\n    }\r\n    setValue(value) {\r\n        this.value = value;\r\n        if (this.valueMap) {\r\n            this.valueString = this.valueMap.getItem(value);\r\n        }\r\n    }\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n    setTitle(title) {\r\n        this.title = title;\r\n    }\r\n    getValueString() {\r\n        // if (this.needFormat){\r\n        //     return this.valueString.replace('%s', this.value.toString())\r\n        // }\r\n        if (this.valueString)\r\n            return this.valueString;\r\n        return '';\r\n    }\r\n    setValueString(valueString) {\r\n        this.valueString = valueString;\r\n    }\r\n    getExceptionLevel() {\r\n        if (this.exceptionLevel)\r\n            return this.exceptionLevel;\r\n        return ExceptionField_1.ExceptionField.Exception_NULL;\r\n    }\r\n}\r\nexports.DeviceFieldForUI = DeviceFieldForUI;\r\n//}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst ByteField_1 = require(\"./ByteField\");\r\nconst DeviceFieldForUI_1 = require(\"./DeviceFieldForUI\");\r\nconst comms_1 = require(\"@sdcsoft/comms\");\r\n//namespace DevicesLib.meta {\r\nclass ExceptionField extends ByteField_1.ByteField {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 异常等级\r\n         */\r\n        this.level = 0;\r\n    }\r\n    setDeviceFieldForUIKey(fieldForUI) {\r\n        fieldForUI.setKey(comms_1.GroupKeys.KEY_EXCEPTION);\r\n    }\r\n    getExceptionLevel() {\r\n        return this.level;\r\n    }\r\n    getDeviceFieldForUI(value) {\r\n        let fieldForUI = new DeviceFieldForUI_1.DeviceFieldForUI();\r\n        this.setDeviceFieldForUIKey(fieldForUI);\r\n        fieldForUI.setName(this.getName());\r\n        fieldForUI.setTitle(this.getTitle());\r\n        fieldForUI.setExcptionLevel(this.level);\r\n        fieldForUI.setValue(this.value);\r\n        return fieldForUI;\r\n    }\r\n}\r\nExceptionField.Exception_NULL = -1;\r\nExceptionField.Exception_Waring = 0;\r\nExceptionField.Exception_Error = 1;\r\nexports.ExceptionField = ExceptionField;\r\n//}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CommandField_1 = require(\"./CommandField\");\r\nconst DeviceFieldForUI_1 = require(\"./DeviceFieldForUI\");\r\nconst Command_1 = require(\"../command/Command\");\r\n//namespace DevicesLib.meta {\r\nclass ByteField extends CommandField_1.CommandField {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.startIndex = 0;\r\n        this.bytesLength = 0;\r\n        this.baseNumber = 0;\r\n        this.bit = 0;\r\n        this.needFormat = false;\r\n        this.value = 0;\r\n        //传递valueMap到UI\r\n        this.tranValueMapToUi = false;\r\n        /**\r\n         * 485内存地址\r\n         */\r\n        this.address = '';\r\n        this.maxValue = 100;\r\n        this.minValue = 0;\r\n    }\r\n    getTranValueMapFlag() {\r\n        return this.tranValueMapToUi;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    getAddress() {\r\n        return this.address;\r\n    }\r\n    setAddress(address) {\r\n        this.address = address;\r\n    }\r\n    getStartIndex() {\r\n        return this.startIndex;\r\n    }\r\n    setStartIndex(startIndex) {\r\n        this.startIndex = startIndex;\r\n    }\r\n    getBytesLength() {\r\n        return this.bytesLength;\r\n    }\r\n    setBytesLength(bytesLength) {\r\n        this.bytesLength = bytesLength;\r\n    }\r\n    getBaseNumber() {\r\n        return this.baseNumber;\r\n    }\r\n    setBaseNumber(baseNumber) {\r\n        this.baseNumber = baseNumber;\r\n    }\r\n    setBit(bit) {\r\n        this.bit = bit;\r\n    }\r\n    setValueMap(valueMap) {\r\n        this.valueMap = valueMap;\r\n    }\r\n    createCommandAndInitValue() {\r\n        let cmd = new Command_1.IntCommand(this.title, this.address, this.maxValue, this.minValue);\r\n        cmd.initValue(this.getValue());\r\n        return cmd;\r\n    }\r\n    getValueBitString() {\r\n        return this.getValue().toString(10);\r\n    }\r\n    getValueString() {\r\n        // if (this.bytesLength > 0) {//bytesLength>0表示点位在数据中真实存储\r\n        //     return this.getValueBitString() + this.getUnit()\r\n        // }\r\n        // return this.getUnit()\r\n        return this.value + this.getUnit();\r\n    }\r\n    getDeviceFieldForUI(value) {\r\n        let fieldForUI;\r\n        if (this.tranValueMapToUi) {\r\n            fieldForUI = new DeviceFieldForUI_1.DeviceFieldForUI(this.valueMap);\r\n        }\r\n        else {\r\n            fieldForUI = new DeviceFieldForUI_1.DeviceFieldForUI();\r\n        }\r\n        this.setDeviceFieldForUIKey(fieldForUI);\r\n        fieldForUI.setName(this.getName());\r\n        fieldForUI.setTitle(this.getTitle());\r\n        fieldForUI.setValueString(this.getValueString());\r\n        //fieldForUI.setNeedFormat(this.needFormat)\r\n        fieldForUI.setUnit(this.getUnit());\r\n        if (value) {\r\n            fieldForUI.setValue(value);\r\n        }\r\n        else {\r\n            fieldForUI.setValue(this.value);\r\n        }\r\n        return fieldForUI;\r\n    }\r\n}\r\nexports.ByteField = ByteField;\r\n//}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst PointField_1 = require(\"./PointField\");\r\n//namespace DevicesLib.meta {\r\nclass CommandField extends PointField_1.PointField {\r\n    constructor() {\r\n        super(...arguments);\r\n        /**\r\n         * 485内存地址\r\n         */\r\n        this.address = '';\r\n        this.maxValue = 100;\r\n        this.minValue = 0;\r\n        this.commandGroupKey = '';\r\n    }\r\n    getAddress() {\r\n        return this.address;\r\n    }\r\n    setAddress(address) {\r\n        this.address = address;\r\n    }\r\n    getMaxValue() {\r\n        return this.maxValue;\r\n    }\r\n    setMaxValue(maxValue) {\r\n        this.maxValue = maxValue;\r\n    }\r\n    getMinValue() {\r\n        return this.minValue;\r\n    }\r\n    setMinValue(minValue) {\r\n        this.minValue = minValue;\r\n    }\r\n    getCommandGroupKey() {\r\n        return this.commandGroupKey;\r\n    }\r\n    setCommandGroupKey(commandGroupKey) {\r\n        this.commandGroupKey = commandGroupKey;\r\n    }\r\n    /**\r\n     * 获取写入命令\r\n     * @return\r\n     */\r\n    getCommand() {\r\n        if (null == this.getAddress() || this.getAddress().length < 4)\r\n            return null;\r\n        let cmd = this.createCommandAndInitValue();\r\n        if (cmd) {\r\n            cmd.setAddress(this.getAddress());\r\n            cmd.setUnit(this.getUnit());\r\n            cmd.setTitle(this.getTitle());\r\n            cmd.setMinValue(this.getMinValue());\r\n            cmd.setMaxValue(this.getMaxValue());\r\n        }\r\n        return cmd;\r\n    }\r\n}\r\nexports.CommandField = CommandField;\r\n//}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n//namespace DevicesLib.meta {\r\nclass PointField {\r\n    constructor() {\r\n        this.name = '';\r\n        this.unit = '';\r\n        this.title = '';\r\n    }\r\n    getName() {\r\n        return this.name;\r\n    }\r\n    setName(name) {\r\n        this.name = name;\r\n    }\r\n    getUnit() {\r\n        return null == this.unit ? '' : this.unit;\r\n    }\r\n    setUnit(unit) {\r\n        this.unit = unit;\r\n    }\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n    setTitle(title) {\r\n        this.title = title;\r\n    }\r\n}\r\nexports.PointField = PointField;\r\n//}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst CRC16Util_1 = require(\"../utils/CRC16Util\");\r\nconst NumberUtil_1 = require(\"../utils/NumberUtil\");\r\n//namespace DevicesLib.cmd {\r\nclass Command {\r\n    constructor(title, address, maxValue, minValue) {\r\n        //protected name: string = ''\r\n        this.address = '';\r\n        this.valueString = '';\r\n        this.value = '';\r\n        this.modbusNo = 1;\r\n        this.unit = '';\r\n        this.title = '';\r\n        this.action = '06';\r\n        this.valueType = Command.INT_VALUE;\r\n        this.valueIsSet = false;\r\n        this.maxValue = 100;\r\n        this.minValue = 0;\r\n        this.script = '';\r\n        this.title = title;\r\n        this.title = address;\r\n        this.minValue = minValue;\r\n        this.maxValue = maxValue;\r\n    }\r\n    getValueString() {\r\n        return this.valueString;\r\n    }\r\n    getCommandString() {\r\n        if (this.valueIsSet) {\r\n            this.valueIsSet = false;\r\n            let str = this.convertToString();\r\n            this.valueString = '';\r\n            return str.toUpperCase();\r\n        }\r\n        return '';\r\n    }\r\n    setModbusNo(modbusNo) {\r\n        this.modbusNo = modbusNo;\r\n    }\r\n    getModbusNo() {\r\n        return this.modbusNo;\r\n    }\r\n    setUnit(unit) {\r\n        this.unit = unit;\r\n    }\r\n    setTitle(title) {\r\n        this.title = title;\r\n    }\r\n    setMaxValue(maxValue) {\r\n        this.maxValue = maxValue;\r\n    }\r\n    setMinValue(minValue) {\r\n        this.minValue = minValue;\r\n    }\r\n    setScript(script) {\r\n        this.script = script;\r\n    }\r\n    setAddress(address) {\r\n        this.address = address;\r\n    }\r\n    getValueType() {\r\n        return this.valueType;\r\n    }\r\n    getMaxValue() {\r\n        return this.maxValue;\r\n    }\r\n    getMinValue() {\r\n        return this.minValue;\r\n    }\r\n    // public getName() {\r\n    //     return this.name\r\n    // }\r\n    // setName(name: string) {\r\n    //     this.name = name\r\n    // }\r\n    /**\r\n     * 用于呈现数据的初始化，数据初始化不影响命令设置状态\r\n     * @param values\r\n     */\r\n    initValue(...values) {\r\n        this.handleValue(values);\r\n    }\r\n    /**\r\n     * 用户设置命令值，影响命令设置状态\r\n     * @param values\r\n     */\r\n    setValue(...values) {\r\n        if (null == values)\r\n            return;\r\n        if (null == values[0])\r\n            return;\r\n        this.handleValue(values);\r\n        this.valueIsSet = true;\r\n    }\r\n    getValue() {\r\n        return this.value;\r\n    }\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n    getUnit() {\r\n        return this.unit;\r\n    }\r\n    getCommand() {\r\n        if (this.valueIsSet) {\r\n            this.valueIsSet = false;\r\n            let str = this.convertToString();\r\n            this.value = '';\r\n            return str.toUpperCase();\r\n        }\r\n        return '';\r\n    }\r\n    static hexStringToBytes(str) {\r\n        if (null != str && str.length != 0) {\r\n            let len = str.length / 2;\r\n            let bytes = new ArrayBuffer(len);\r\n            let v = new Uint8Array(bytes);\r\n            for (let i = 0; i < len; i++) {\r\n                v[i] = (parseInt(str.substr(i * 2, 2), 16));\r\n            }\r\n            return v;\r\n        }\r\n        return null;\r\n    }\r\n    static toNumbers(str) {\r\n        let numbers = [];\r\n        if (null != str && str.length != 0) {\r\n            let len = str.length / 2;\r\n            for (let i = 0; i < len; i++) {\r\n                //console.log(str.substr(i * 2, 2))\r\n                numbers.push(parseInt(str.substr(i * 2, 2), 16));\r\n            }\r\n        }\r\n        return numbers;\r\n    }\r\n    /**\r\n    static intToHexString(x: number, hexLength: number = 4): string {\r\n        let str = x.toString(16)\r\n        for (let i = str.length i < hexLength i++) {\r\n            str += ('0' + str)\r\n        }\r\n        return str\r\n    }\r\n*/\r\n    static intToBytes4(n) {\r\n        let b = new ArrayBuffer(4);\r\n        let v = new Uint8Array(b);\r\n        for (let i = 0; i < 4; i++) {\r\n            v[i] = (n >> (24 - i * 8));\r\n        }\r\n        return b;\r\n    }\r\n    initCommand(title, address, maxValue, minValue, value) {\r\n        this.setTitle(title);\r\n        this.setAddress(address);\r\n        this.setMinValue(minValue);\r\n        this.setMaxValue(maxValue);\r\n        this.initValue(value);\r\n    }\r\n    evalScriptText(value) {\r\n    }\r\n}\r\nCommand.INT_VALUE = 1;\r\nCommand.FLOAT_VALUE = 2;\r\nCommand.FLOAT_MAP_VALUE = 3;\r\nCommand.TIME_VALUE = 4;\r\nCommand.OPEN_CLOSE_VALUE = 5;\r\nCommand.SYSTEM_VALUE = 6;\r\nexports.Command = Command;\r\nclass IntCommand extends Command {\r\n    constructor(title, address, maxValue, minValue) {\r\n        super(title, address, minValue, maxValue);\r\n        this.valueType = Command.INT_VALUE;\r\n    }\r\n    handleValue(values) {\r\n        this.valueString = values[0].toString();\r\n        this.value = NumberUtil_1.NumberUtil.NumberToString(values[0], 16, 4); // Command.intToHexString(values[0])\r\n    }\r\n    convertToString() {\r\n        let no = NumberUtil_1.NumberUtil.NumberToString(this.getModbusNo(), 16, 2); //Command.intToHexString(this.getModbusNo())\r\n        let baseStr = no + this.action + this.address + this.value;\r\n        let data = Command.toNumbers(baseStr);\r\n        return baseStr + CRC16Util_1.CRC16Util.getCrc(CRC16Util_1.CRC16Util.calcCrc16(data, 0, data.length)) + '0000000000';\r\n    }\r\n}\r\nexports.IntCommand = IntCommand;\r\nclass TimeCommand extends IntCommand {\r\n    constructor(title, address) {\r\n        super(title, address, 0, 0);\r\n        this.valueType = Command.TIME_VALUE;\r\n        this.script = '';\r\n    }\r\n    handleValue(values) {\r\n        let hstr = (values[0] / 60).toString();\r\n        let mstr = (values[1] % 60).toString();\r\n        if (2 > hstr.length)\r\n            hstr = '0' + hstr;\r\n        if (2 > mstr.length)\r\n            mstr = '0' + mstr;\r\n        this.valueString = hstr + ':' + mstr;\r\n        this.value = NumberUtil_1.NumberUtil.NumberToString(values[0] * 60 + values[1], 16, 4); //Command.intToHexString(values[0] * 60 + values[1])\r\n    }\r\n}\r\nexports.TimeCommand = TimeCommand;\r\nclass SystemCommand extends IntCommand {\r\n    constructor(title, address, maxValue, minValue) {\r\n        super(title, address, minValue, maxValue);\r\n        this.valueType = Command.SYSTEM_VALUE;\r\n        this.valueIsSet = false;\r\n    }\r\n}\r\nexports.SystemCommand = SystemCommand;\r\nclass FloatCommand extends Command {\r\n    constructor(title, address, maxValue, minValue) {\r\n        super(title, address, minValue, maxValue);\r\n        this.action = '10';\r\n        this.valueType = Command.FLOAT_VALUE;\r\n    }\r\n    handleValue(values) {\r\n        this.valueString = values[0].toFixed(2);\r\n        let data = new ArrayBuffer(4);\r\n        let view = new DataView(data);\r\n        view.setFloat32(0, values[0], false);\r\n        this.value = NumberUtil_1.NumberUtil.NumberToString(view.getUint8(0), 16, 2) +\r\n            NumberUtil_1.NumberUtil.NumberToString(view.getUint8(1), 16, 2) +\r\n            NumberUtil_1.NumberUtil.NumberToString(view.getUint8(2), 16, 2) +\r\n            NumberUtil_1.NumberUtil.NumberToString(view.getUint8(3), 16, 2);\r\n    }\r\n    convertToString() {\r\n        let no = NumberUtil_1.NumberUtil.NumberToString(this.getModbusNo(), 16, 2);\r\n        let baseStr = no + this.action + this.address + '000204' + this.value;\r\n        let data = Command.toNumbers(baseStr);\r\n        return baseStr + CRC16Util_1.CRC16Util.getCrc(CRC16Util_1.CRC16Util.calcCrc16(data, 0, data.length));\r\n    }\r\n}\r\nexports.FloatCommand = FloatCommand;\r\nclass OpenCloseCommand extends IntCommand {\r\n    constructor(title, address, maxValue, minValue) {\r\n        super(title, address, minValue, maxValue);\r\n        this.valueType = Command.OPEN_CLOSE_VALUE;\r\n    }\r\n}\r\nexports.OpenCloseCommand = OpenCloseCommand;\r\n//}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst NumberUtil_1 = require(\"./NumberUtil\");\r\n//namespace DevicesLib.utils {\r\nclass CRC16Util {\r\n    /**\r\n     * 计算CRC16校验\r\n     *\r\n     * @param data   需要计算的数组\r\n     * @param offset 起始位置\r\n     * @param len    长度\r\n     * @param preval 之前的校验值\r\n     * @return CRC16校验值\r\n     */\r\n    static calcCrc16(data, offset, len, preval = 0xffff) {\r\n        let ucCRCHi = (preval & 0xff00) >> 8;\r\n        let ucCRCLo = preval & 0x00ff;\r\n        let iIndex;\r\n        for (let i = 0; i < len; ++i) {\r\n            iIndex = (ucCRCLo ^ data[offset + i]) & 0x00ff;\r\n            ucCRCLo = ucCRCHi ^ CRC16Util.crc16_tab_h[iIndex];\r\n            ucCRCHi = CRC16Util.crc16_tab_l[iIndex];\r\n        }\r\n        return ((ucCRCHi & 0x00ff) << 8) | (ucCRCLo & 0x00ff) & 0xffff;\r\n    }\r\n    /**\r\n     * 将计算的CRC值 转换为加空格的  比如  ： crc值为 A30A -> A3 0A\r\n     *\r\n     * @param res\r\n     * @return\r\n     */\r\n    static getCrc(res, bigEndian = false) {\r\n        let str = NumberUtil_1.NumberUtil.NumberToString(res, 16, 4); //Command.intToHexString(res)\r\n        if (bigEndian)\r\n            return str;\r\n        let substring = str.substring(0, 2);\r\n        let substring1 = str.substring(2, 4);\r\n        return substring1.concat('').concat(substring);\r\n    }\r\n}\r\nCRC16Util.crc16_tab_h = [0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,\r\n    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,\r\n    0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,\r\n    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,\r\n    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40];\r\nCRC16Util.crc16_tab_l = [0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12,\r\n    0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7,\r\n    0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74,\r\n    0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D,\r\n    0x4C, 0x8C, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40];\r\nexports.CRC16Util = CRC16Util;\r\n//}\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass NumberUtil {\r\n    static NumberToString(x, stringType = 10, length = 10) {\r\n        let str = x.toString(stringType);\r\n        for (let i = str.length; i < length; i++) {\r\n            str = ('0' + str);\r\n        }\r\n        return str;\r\n    }\r\n}\r\nexports.NumberUtil = NumberUtil;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Element {\r\n    constructor() {\r\n        this.values = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1];\r\n        this.title = '';\r\n        this.prefix = '';\r\n    }\r\n    getTitle() {\r\n        return this.title;\r\n    }\r\n    setTitle(title) {\r\n        this.title = title;\r\n    }\r\n    getPrefix() {\r\n        return this.prefix;\r\n    }\r\n    setPrefix(prefix) {\r\n        this.prefix = prefix;\r\n    }\r\n    ClearValues() {\r\n        for (let i = 0; i < this.values.length; i++) {\r\n            this.values[i] = -1;\r\n        }\r\n    }\r\n    SetValues(index, ...data) {\r\n        for (let i = index, j = 0; j < data.length; i++, j++) {\r\n            this.values[i] = data[j];\r\n        }\r\n    }\r\n    getElementPrefixAndValuesString(spacerString = '-') {\r\n        let sb = this.prefix;\r\n        for (let i in this.values) {\r\n            if (this.values[i] > -1) {\r\n                sb += spacerString;\r\n                sb += this.values[i].toString();\r\n                continue;\r\n            }\r\n            break;\r\n        }\r\n        if (this.prefix == Element.Prefix_Stove) {\r\n            return sb.substr(0, sb.length - 1) + '0';\r\n        }\r\n        return sb;\r\n    }\r\n}\r\nElement.Prefix_Stove = 'a';\r\nElement.Prefix_Beng = 'b';\r\nElement.Prefix_Fan = 'c';\r\nElement.Index_A_Power = 0;\r\nElement.Index_A_Media = 1;\r\nElement.Index_A_Status = 2;\r\nElement.Index_A_Style = 3;\r\nElement.Index_Beng_Count = 0;\r\nElement.Index_Beng_Status = 1;\r\nElement.Index_Fan_Count = 0;\r\nElement.Index_Fan_Status = 1;\r\nexports.Element = Element;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst comms_1 = require(\"@sdcsoft/comms\");\r\nclass map {\r\n    constructor() {\r\n        this.pointMap = new comms_1.StringHashMap();\r\n        //protected commandMap: StringHashMap<Command[] | null> = new StringHashMap<Command[] | null>()\r\n        this.commandMap = new comms_1.StringHashMap();\r\n    }\r\n    //protected subTypes: StringHashMap<string> = new StringHashMap<string>()\r\n    //protected warningMsg:string = ''\r\n    getPointMap() {\r\n        return this.pointMap;\r\n    }\r\n    getCommandsMap() {\r\n        return this.commandMap;\r\n    }\r\n    addPoint(byteField, key) {\r\n        if (key) {\r\n            this.pointMap.addItem(key, byteField);\r\n            return;\r\n        }\r\n        this.pointMap.addItem(byteField.getName(), byteField);\r\n    }\r\n    addCommand(groupKey, cmd) {\r\n        if (this.commandMap.containsKey(groupKey)) {\r\n            let cmds = this.commandMap.getItem(groupKey);\r\n            cmds.push(cmd);\r\n        }\r\n        else {\r\n            let cmds = [cmd];\r\n            this.commandMap.addItem(groupKey, cmds);\r\n        }\r\n    }\r\n}\r\n// static readonly KEY_BASE = 'baseInfo'\r\n// static readonly KEY_RUN = 'runInfo'\r\n// static readonly KEY_EXCEPTION = 'exceptionInfo'\r\n// static readonly KEY_MOCK = 'mockInfo'\r\n// static readonly KEY_SETTING = 'settingInfo'\r\n// static readonly KEY_START_STOP = 'startStopInfo'\r\n// static readonly KEY_DEVICE = 'deviceInfo'\r\n// static readonly KEY_OPEN_CLOSE = 'openclose'\r\n/**\r\n * 计算属性的KEY\r\n */\r\nmap.KEY_Count_Fields = 'countfields';\r\nmap.KEY_POINT_SYSTEM_STATUS = 'o_system_status';\r\nmap.KEY_POINT_POWER = 'o_power';\r\nmap.KEY_POINT_MEDIA = 'o_media';\r\nmap.KEY_POINT_RUN_LIFE = 'ba_yunxingshijian';\r\nmap.KEY_POINT_RUN_DAYS = 'ba_yunxingtianshu';\r\nmap.KEY_POINT_RUN_HOURS = 'ba_yunxingxiaoshishu';\r\nexports.map = map;\r\n","\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst SdcSoftDevice_1 = require(\"../devices/SdcSoftDevice\");\r\nclass Wechat_DeviceAdapter {\r\n    static setLang(lang = 'zh-cn') {\r\n        this.lang = lang;\r\n        return new Wechat_DeviceAdapter();\r\n    }\r\n    createDeviceFunc(type) {\r\n        let strs = type.split('_');\r\n        let path = '../devices/' + strs.join('/');\r\n        let deviceType = require(path);\r\n        let d = new deviceType();\r\n        return d;\r\n    }\r\n    createMapFunc(type) {\r\n        let strs = type.split('_');\r\n        let path = '../map/' + Wechat_DeviceAdapter.lang + '/' + strs.join('/');\r\n        let mapType = require(path);\r\n        let d = new mapType();\r\n        return d;\r\n    }\r\n    /**\r\n     * 获取子类别设备对象\r\n     */\r\n    getSubDevice(type, sub, data) {\r\n        let t = type + '_' + sub;\r\n        let device = this.createDeviceFunc(t);\r\n        let map = this.createMapFunc(t);\r\n        if (device.validateFalse(data.byteLength)) {\r\n            return null;\r\n        }\r\n        device.setTypeName(t);\r\n        map.getPointMap().each((key, value) => {\r\n            device.handleByteField(value, data);\r\n        });\r\n        device.handleCommandFields(map.getCommandsMap());\r\n        return device;\r\n    }\r\n    getSdcSoftDevice(type, data, power = SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL, media = SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL) {\r\n        let device = this.createDeviceFunc(type);\r\n        let map = this.createMapFunc(type);\r\n        if (device.validateFalse(data.byteLength)) {\r\n            return null;\r\n        }\r\n        /*用户确认设备类型时的逻辑\r\n        *设置设备警告信息\r\n        device.setWarningMsg(map.getwarningMsg())\r\n        *设置子类设备信息\r\n        device.setSubTypes(map.getSubTypes())\r\n         */\r\n        map.getPointMap().each((key, value) => {\r\n            /*\r\n            if (key == SdcSoftDevice.KEY_POINT_RUN_DAYS) {\r\n                console.log('hhhhhhh')\r\n            }*/\r\n            device.handleByteField(value, data);\r\n        });\r\n        //自动进行子类型确认\r\n        if (device.getSubDeviceType() != SdcSoftDevice_1.SdcSoftDevice.NO_SUB_DEVICE_TYPE) {\r\n            let subDevice = this.getSubDevice(type, device.getSubDeviceType(), data);\r\n            if (null == subDevice)\r\n                return null;\r\n            device = subDevice;\r\n        }\r\n        else {\r\n            device.setTypeName(type);\r\n            device.handleCommandFields(map.getCommandsMap());\r\n        }\r\n        let powerUI = device.getBaseInfoFields().getItem(SdcSoftDevice_1.SdcSoftDevice.KEY_POINT_POWER);\r\n        let mediaUI = device.getBaseInfoFields().getItem(SdcSoftDevice_1.SdcSoftDevice.KEY_POINT_MEDIA);\r\n        if (powerUI && mediaUI) {\r\n            if (power != SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL &&\r\n                media != SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL) {\r\n                //设备中需要显示的点位都必须出现在点位表中，即使通过header传递的点位也必需在点位表中设置。\r\n                //只有出现在点位表中的点位才能进行多语言转换，如燃料。如果“燃料”不在点位表中添加，则“燃料”\r\n                // 的多语言翻译无法在程序中确认。\r\n                powerUI.setValue(power);\r\n                powerUI.setValueString(map.getPowerString(power));\r\n                mediaUI.setValue(media);\r\n                mediaUI.setValueString(map.getMediaString(media));\r\n            }\r\n            else {\r\n                device.setPower(powerUI.getValue());\r\n                device.setMedia(mediaUI.getValue());\r\n            }\r\n        }\r\n        else {\r\n            device.setPower(0);\r\n            device.setMedia(0);\r\n        }\r\n        return device;\r\n    }\r\n}\r\nWechat_DeviceAdapter.lang = 'zh-cn';\r\nexports.Wechat_DeviceAdapter = Wechat_DeviceAdapter;\r\n// export class Web_DeviceAdapter2 {\r\n//     private static lang: Language = 'zh-cn'\r\n//     static setLang(lang: Language = 'zh-cn'): Web_DeviceAdapter2 {\r\n//         this.lang = lang\r\n//         return new Web_DeviceAdapter2()\r\n//     }\r\n//     private async createDeviceFunc(type: string): Promise<SdcSoftDevice> {\r\n//         let strs = type.split('_')\r\n//         let path = '../devices/' + strs.join('/');\r\n//         let deviceType = await import(path);\r\n//         let d = new deviceType();\r\n//         return d;\r\n//     }\r\n//     private async createMapFunc(type: string): Promise<PointMap> {\r\n//         let strs = type.split('_')\r\n//         let path = '../map/' + Web_DeviceAdapter2.lang + '/' + strs.join('/');\r\n//         let mapType = await import(path);\r\n//         let d = new mapType();\r\n//         return d;\r\n//     }\r\n//     /**\r\n//      * 获取子类别设备对象\r\n//      */\r\n//     private async getSubDevice(type: string, sub: string, data: Uint8Array): Promise<SdcSoftDevice | null> {\r\n//         let t: string = type + '_' + sub\r\n//         let device = await this.createDeviceFunc(t)\r\n//         if (device.validateFalse(data.byteLength)) {\r\n//             //throw new Error(\"byte data length to short.\")\r\n//             return null\r\n//         }\r\n//         device.setTypeName(t)\r\n//         let map = await this.createMapFunc(t)\r\n//         map.getPointMap().each((key, value) => {\r\n//             device.handleByteField(value, data)\r\n//         })\r\n//         device.handleCommandFields(map.getCommandsMap())\r\n//         return device\r\n//     }\r\n//     async getSdcSoftDevice(type: string, data: Uint8Array, power: number = SdcSoftDevice.POWER_MEDIA_VALUE_NULL, media: number = SdcSoftDevice.POWER_MEDIA_VALUE_NULL): Promise<SdcSoftDevice | null> {\r\n//         let device = await this.createDeviceFunc(type)\r\n//         let map = await this.createMapFunc(type)\r\n//         if (device.validateFalse(data.byteLength)) {\r\n//             return null\r\n//         }\r\n//         map.getPointMap().each((key, value) => {\r\n//             /*\r\n//             if (key == SdcSoftDevice.KEY_POINT_RUN_DAYS) {\r\n//                 console.log('hhhhhhh')\r\n//             }*/\r\n//             device.handleByteField(value, data)\r\n//         })\r\n//         //自动进行子类型确认\r\n//         if (device.getSubDeviceType() != SdcSoftDevice.NO_SUB_DEVICE_TYPE) {\r\n//             let subDevice: SdcSoftDevice | null = await this.getSubDevice(type, device.getSubDeviceType(), data)\r\n//             if (null == subDevice)\r\n//                 return null\r\n//             device = subDevice\r\n//         }\r\n//         else {\r\n//             device.setTypeName(type)\r\n//             device.handleCommandFields(map.getCommandsMap())\r\n//         }\r\n//         let powerUI = device.getBaseInfoFields().getItem(SdcSoftDevice.KEY_POINT_POWER)\r\n//         let mediaUI = device.getBaseInfoFields().getItem(SdcSoftDevice.KEY_POINT_MEDIA)\r\n//         if (powerUI && mediaUI) {\r\n//             if (power != SdcSoftDevice.POWER_MEDIA_VALUE_NULL &&\r\n//                 media != SdcSoftDevice.POWER_MEDIA_VALUE_NULL) {\r\n//                 //设备中需要显示的点位都必须出现在点位表中，即使通过header传递的点位也必需在点位表中设置。\r\n//                 //只有出现在点位表中的点位才能进行多语言转换，如燃料。如果“燃料”不在点位表中添加，则“燃料”\r\n//                 // 的多语言翻译无法在程序中确认。\r\n//                 powerUI.setValue(power)\r\n//                 powerUI.setValueString(map.getPowerString(power))\r\n//                 mediaUI.setValue(media)\r\n//                 mediaUI.setValueString(map.getMediaString(media))\r\n//             } else {\r\n//                 device.setPower(powerUI.getValue())\r\n//                 device.setMedia(mediaUI.getValue())\r\n//             }\r\n//         }\r\n//         else {\r\n//             device.setPower(0)\r\n//             device.setMedia(0)\r\n//         }\r\n//         return device\r\n//     }\r\n// }\r\nclass Web_DeviceAdapter {\r\n    static setLang(lang = 'zh-cn') {\r\n        this.lang = lang;\r\n        return new Web_DeviceAdapter();\r\n    }\r\n    createMapFunc(type) {\r\n        return new Promise((resolve, reject) => {\r\n            let strs = type.split('_');\r\n            Promise.resolve().then(() => require('../map/' + Web_DeviceAdapter.lang + '/' + strs.join('/'))).then(data => {\r\n                resolve(new data());\r\n            }).catch((r) => {\r\n                console.log(r);\r\n                reject(r);\r\n            });\r\n        });\r\n    }\r\n    createDeviceFunc(type) {\r\n        return new Promise((resolve, reject) => {\r\n            let strs = type.split('_');\r\n            Promise.resolve().then(() => require('../devices/' + strs.join('/'))).then(data => {\r\n                resolve(new data());\r\n            }).catch(function (r) {\r\n                console.log(r);\r\n                reject(r);\r\n            });\r\n        });\r\n    }\r\n    getSubDevice(type, sub, data) {\r\n        return new Promise((resolve, reject) => {\r\n            let t = type + '_' + sub;\r\n            Promise.all([this.createDeviceFunc(t), this.createMapFunc(t)]).then((result) => {\r\n                let device = result[0];\r\n                let map = result[1];\r\n                if (device.validateFalse(data.byteLength)) {\r\n                    throw new Error(\"子类型设备要求的data长度不足！\");\r\n                }\r\n                map.getPointMap().each((key, value) => {\r\n                    device.handleByteField(value, data);\r\n                });\r\n                device.handleCommandFields(map.getCommandsMap());\r\n                resolve(device);\r\n            }).catch(function (r) {\r\n                console.log(r);\r\n                reject(r);\r\n            });\r\n        });\r\n    }\r\n    getSdcSoftDevice(type, data, power = SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL, media = SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL) {\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([this.createMapFunc(type), this.createDeviceFunc(type)]).then((result) => {\r\n                let map = result[0];\r\n                let device = result[1];\r\n                if (device.validateFalse(data.byteLength)) {\r\n                    throw new Error(\"设备要求的data长度不足！\");\r\n                }\r\n                map.getPointMap().each((key, value) => {\r\n                    device.handleByteField(value, data);\r\n                });\r\n                if (device.getSubDeviceType() != SdcSoftDevice_1.SdcSoftDevice.NO_SUB_DEVICE_TYPE) {\r\n                    this.getSubDevice(type, device.getSubDeviceType(), data).then(result => {\r\n                        device = result;\r\n                    });\r\n                }\r\n                else {\r\n                    device.setTypeName(type);\r\n                    device.handleCommandFields(map.getCommandsMap());\r\n                }\r\n                let powerUI = device.getBaseInfoFields().getItem(SdcSoftDevice_1.SdcSoftDevice.KEY_POINT_POWER);\r\n                let mediaUI = device.getBaseInfoFields().getItem(SdcSoftDevice_1.SdcSoftDevice.KEY_POINT_MEDIA);\r\n                if (powerUI && mediaUI) {\r\n                    if (power != SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL &&\r\n                        media != SdcSoftDevice_1.SdcSoftDevice.POWER_MEDIA_VALUE_NULL) {\r\n                        //设备中需要显示的点位都必须出现在点位表中，即使通过header传递的点位也必需在点位表中设置。\r\n                        //只有出现在点位表中的点位才能进行多语言转换，如燃料。如果“燃料”不在点位表中添加，则“燃料”\r\n                        // 的多语言翻译无法在程序中确认。\r\n                        powerUI.setValue(power);\r\n                        powerUI.setValueString(map.getPowerString(power));\r\n                        mediaUI.setValue(media);\r\n                        mediaUI.setValueString(map.getMediaString(media));\r\n                    }\r\n                    else {\r\n                        device.setPower(powerUI.getValue());\r\n                        device.setMedia(mediaUI.getValue());\r\n                    }\r\n                }\r\n                else {\r\n                    device.setPower(0);\r\n                    device.setMedia(0);\r\n                }\r\n                resolve(device);\r\n            }).catch(function (r) {\r\n                console.log(r);\r\n                reject(r);\r\n            });\r\n        });\r\n    }\r\n}\r\nWeb_DeviceAdapter.lang = 'zh-cn';\r\nexports.Web_DeviceAdapter = Web_DeviceAdapter;\r\n"]}